package cc.u2me.sudoku;

import java.io.FileReader;

/**
 * 
D:/shudu.txt

8 0 0 0 0 0 0 0 0
0 0 3 6 0 0 0 0 0
0 7 0 0 9 0 2 0 0
0 5 0 0 0 7 0 0 0
0 0 0 0 4 5 7 0 0
0 0 0 1 0 0 0 3 0
0 0 1 0 0 0 0 6 8
0 0 8 5 0 0 0 1 0
0 9 0 0 0 0 4 0 0

 
use Time:120ms
Original
-------------------------
| 8 0 0 | 0 0 0 | 0 0 0 |
| 0 0 3 | 6 0 0 | 0 0 0 |
| 0 7 0 | 0 9 0 | 2 0 0 |
-------------------------
| 0 5 0 | 0 0 7 | 0 0 0 |
| 0 0 0 | 0 4 5 | 7 0 0 |
| 0 0 0 | 1 0 0 | 0 3 0 |
-------------------------
| 0 0 1 | 0 0 0 | 0 6 8 |
| 0 0 8 | 5 0 0 | 0 1 0 |
| 0 9 0 | 0 0 0 | 4 0 0 |
-------------------------
Solved
-------------------------
| 8 1 2 | 7 5 3 | 6 4 9 |
| 9 4 3 | 6 8 2 | 1 7 5 |
| 6 7 5 | 4 9 1 | 2 8 3 |
-------------------------
| 1 5 4 | 2 3 7 | 8 9 6 |
| 3 6 9 | 8 4 5 | 7 2 1 |
| 2 8 7 | 1 6 9 | 5 3 4 |
-------------------------
| 5 2 1 | 9 7 4 | 3 6 8 |
| 4 3 8 | 5 2 6 | 9 1 7 |
| 7 9 6 | 3 1 8 | 4 5 2 |
-------------------------

 * 我本来想这么做的，但是没实现：从待解决的Cell里面挑一个选择最少的开始，假设其中一个备选项作为答案，然后与它相关联的横竖周围的那些Cell分别去掉那个值，
 * 然后又从其余的Cell中挑选一个继续进行。
 * 如果没有Cell可以挑选了，看看是不是完成了，如果没有完成则回退到上一步，选择另外一个备选项作为答案，继续进行。
 * 如果回退后发现没有备选项了，这个Cell的备选项恢复原貌，再回到退上一步。继续进行。
 * @author lijiaming
 *
 */
public class SmartSudoku {

	public static void main(String[] args) throws Exception {

		Administrator admin = new Administrator();
		FileReader rd = new FileReader("D:/shudu.txt");
		admin.create(rd);
		System.out.println(admin);
		while(true) {
			admin.elect();
		}
	
	}
}
